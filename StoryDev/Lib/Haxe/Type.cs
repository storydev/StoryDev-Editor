// Generated by Haxe 4.1.5

#pragma warning disable 109, 114, 219, 429, 168, 162
public class Type : global::haxe.lang.HxObject {
	
	public Type(global::haxe.lang.EmptyObject empty) {
	}
	
	
	public Type() {
		global::Type.__hx_ctor__Type(this);
	}
	
	
	protected static void __hx_ctor__Type(global::Type __hx_this) {
	}
	
	
	public static string getClassName(global::System.Type c) {
		unchecked {
			string ret = ( ((global::System.Type) (c) ) as global::System.Reflection.MemberInfo ).ToString();
			switch (ret) {
				case "System.Boolean":
				{
					return "Bool";
				}
				
				
				case "System.Double":
				{
					return "Float";
				}
				
				
				case "System.Int32":
				{
					return "Int";
				}
				
				
				case "System.Object":
				{
					return "Dynamic";
				}
				
				
				case "System.String":
				{
					return "String";
				}
				
				
				case "System.Type":
				{
					return "Class";
				}
				
				
				default:
				{
					return ((string) ((((global::System.String) (((object) (ret) )) )).Split(((char[]) (new char[]{((char) (96) )}) ))[0]) );
				}
				
			}
			
		}
	}
	
	
	public static global::System.Type resolveClass(string name) {
		unchecked {
			global::System.Type t = global::System.Type.GetType(((string) (name) ));
			if (global::System.Object.ReferenceEquals(((object) (t) ), default(object))) {
				global::System.Collections.IEnumerator all = ( global::System.AppDomain.CurrentDomain.GetAssemblies() as global::System.Array ).GetEnumerator();
				while (all.MoveNext()) {
					global::System.Reflection.Assembly t2 = ((global::System.Reflection.Assembly) (all.Current) );
					t = t2.GetType(((string) (name) ));
					if ( ! (global::System.Object.ReferenceEquals(((object) (t) ), default(object))) ) {
						break;
					}
					
				}
				
			}
			
			if (global::System.Object.ReferenceEquals(((object) (t) ), default(object))) {
				switch (name) {
					case "Bool":
					{
						return ((global::System.Type) (typeof(bool)) );
					}
					
					
					case "Class":
					{
						return ((global::System.Type) (typeof(global::System.Type)) );
					}
					
					
					case "Dynamic":
					{
						return ((global::System.Type) (typeof(object)) );
					}
					
					
					case "Float":
					{
						return ((global::System.Type) (typeof(double)) );
					}
					
					
					case "Int":
					{
						return ((global::System.Type) (typeof(int)) );
					}
					
					
					case "String":
					{
						return ((global::System.Type) (typeof(string)) );
					}
					
					
					default:
					{
						return null;
					}
					
				}
				
			}
			else if (( t.IsInterface && (((global::System.Type) (typeof(global::haxe.lang.IGenericObject)) )).IsAssignableFrom(((global::System.Type) (t) )) )) {
				{
					object[] _g_arr = ( t as global::System.Reflection.MemberInfo ).GetCustomAttributes(((bool) (true) ));
					uint _g_idx = ((uint) (0) );
					while (( _g_idx < ( _g_arr as global::System.Array ).Length )) {
						_g_idx += ((uint) (1) );
						object attr = ((object) (_g_arr[((int) (((uint) (( _g_idx - 1 )) )) )]) );
						global::haxe.lang.GenericInterface g = ( ((object) (attr) ) as global::haxe.lang.GenericInterface );
						if (( g != null )) {
							return ((global::System.Type) (g.generic) );
						}
						
					}
					
				}
				
				return ((global::System.Type) (t) );
			}
			else {
				return ((global::System.Type) (t) );
			}
			
		}
	}
	
	
	public static T createInstance<T>(global::System.Type cl, global::Array args) {
		if (global::System.Object.ReferenceEquals(((object) (cl) ), ((object) (typeof(string)) ))) {
			return global::haxe.lang.Runtime.genericCast<T>(args[0]);
		}
		
		global::System.Type t = ((global::System.Type) (cl) );
		if (t.IsInterface) {
			t = global::Type.resolveClass(global::Type.getClassName(cl));
		}
		
		global::System.Reflection.ConstructorInfo[] ctors = t.GetConstructors();
		int tmp = ( ctors as global::System.Array ).Length;
		object[] ret = new object[((int) (global::haxe.lang.Runtime.getField_f(args, "length", 520590566, true)) )];
		global::cs.Lib.p_nativeArray<object>(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (args) ))) ), ((global::System.Array) (ret) ));
		return global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.callMethod(null, ((global::System.Reflection.MethodBase[]) (ctors) ), tmp, ret));
	}
	
	
	public static global::Array<string> getClassFields(global::System.Type c) {
		if (global::System.Object.ReferenceEquals(((object) (c) ), ((object) (typeof(string)) ))) {
			return new global::Array<string>(new string[]{"fromCharCode"});
		}
		
		global::Array<string> ret = new global::Array<string>(new string[]{});
		global::haxe.lang.Null<global::System.Reflection.BindingFlags> initial = new global::haxe.lang.Null<global::System.Reflection.BindingFlags>(global::System.Reflection.BindingFlags.Public, true);
		global::System.Reflection.BindingFlags this1 = ( ( ! (initial.hasValue) ) ? (default(global::System.Reflection.BindingFlags)) : ((initial).@value) );
		global::haxe.lang.Null<global::System.Reflection.BindingFlags> initial1 = new global::haxe.lang.Null<global::System.Reflection.BindingFlags>(( ((global::System.Reflection.BindingFlags) (this1) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.Static) ) ), true);
		global::System.Reflection.BindingFlags this2 = ( ( ! (initial1.hasValue) ) ? (default(global::System.Reflection.BindingFlags)) : ((initial1).@value) );
		global::System.Reflection.MemberInfo[] infos = ((global::System.Type) (c) ).GetMembers(((global::System.Reflection.BindingFlags) (this2) ));
		{
			int _g = 0;
			int _g1 = ( infos as global::System.Array ).Length;
			while (( _g < _g1 )) {
				int i = _g++;
				string name = ((global::System.Reflection.MemberInfo) (infos[i]) ).Name;
				if ( ! (name.StartsWith("__hx_")) ) {
					ret.push(name);
				}
				
			}
			
		}
		
		return ret;
	}
	
	
	public static bool enumEq<T>(T a, T b) {
		if (global::haxe.lang.Runtime.eq(a, default(T))) {
			return global::haxe.lang.Runtime.eq(b, default(T));
		}
		else if (global::haxe.lang.Runtime.eq(b, default(T))) {
			return false;
		}
		else {
			return a.Equals(b);
		}
		
	}
	
	
	public static string enumConstructor(object e) {
		if (( e is global::System.Enum )) {
			return ( (((global::System.Enum) (e) )) as global::System.ValueType ).ToString();
		}
		else {
			return (((global::haxe.lang.Enum) (e) )).getTag();
		}
		
	}
	
	
	public static global::Array enumParameters(object e) {
		if (( e is global::System.Enum )) {
			return new global::Array<object>(new object[]{});
		}
		else {
			return (((global::haxe.lang.Enum) (e) )).getParams();
		}
		
	}
	
	
	public static int enumIndex(object e) {
		if (( e is global::System.Enum )) {
			global::System.Array values = global::System.Enum.GetValues(((global::System.Type) (((object) (e) ).GetType()) ));
			return global::System.Array.IndexOf(((global::System.Array) (values) ), ((object) (e) ));
		}
		else {
			return (((global::haxe.lang.Enum) (e) ))._hx_index;
		}
		
	}
	
	
}


